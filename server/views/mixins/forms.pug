- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, labelName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelName
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, labelName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelName
    textarea(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      rows="3"      
    )&attributes(attributes)
      =_.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, labelName, errors = {}, options, optionName, selectedNumbers = [],)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - isStatusOrLabel = (optionName === 'status' || optionName === 'labels')
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelName
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes) 
      option(selected)
      each option in options
        option(value=option.id selected=(selectedNumbers.includes(option.id)))
          if isStatusOrLabel
            =option.name
          else
            =option.fullName()
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin searchSelect(propertyName, labelName, errors = {}, options, optionName, selectedNumbers = [],)
  - inputId = getInputId(propertyName)
  - isStatusOrLabel = (optionName === 'status' || optionName === 'labels')
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= labelName
    select(
      id= inputId
      name=propertyName
      class='form-control'
    )&attributes(attributes) 
      option(selected)
      each option in options
        option(value=option.id selected=(selectedNumbers.includes(option.id)))
          if isStatusOrLabel
            =option.name
          else
            =option.fullName()

mixin submit(form = null)
  .form-group
    input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
